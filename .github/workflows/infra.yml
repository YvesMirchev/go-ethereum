name: Terraform Pipeline

on:
  workflow_dispatch:
    inputs:
      destroy:
        description: "Set true to destroy infrastructure"
        required: false
        default: "false"
        type: choice
        options:
          - "false"
          - "true"

env:
  TF_IN_AUTOMATION: true
  TF_VAR_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  TF_VAR_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  init:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    defaults:
      run:
        working-directory: infra
    outputs:
      env_name: ${{ steps.setenv.outputs.env_name }}
      bucket: ${{ steps.setenv.outputs.bucket }}
      key: ${{ steps.setenv.outputs.key }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Set environment variables from branch
        id: setenv
        run: |
          BRANCH_NAME="${GITHUB_REF##*/}"
          echo "env_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo "bucket=go-ethereum-${BRANCH_NAME}-terraform-state-bucket" >> $GITHUB_OUTPUT
          echo "key=go-ethereum/${BRANCH_NAME}/terraform.tfstate" >> $GITHUB_OUTPUT

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ steps.setenv.outputs.bucket }}" \
            -backend-config="key=${{ steps.setenv.outputs.key }}" \
            -backend-config="region=us-east-1" \
            -backend-config="encrypt=true" \
            -backend-config="use_lockfile=true"

      - name: Upload .terraform directory artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-init-${{ github.ref_name }}
          include-hidden-files: true
          retention-days: 1
          path: |
            ${{ github.workspace }}/infra/.terraform
            ${{ github.workspace }}/infra/.terraform.lock.hcl

  plan:
    if: ${{ github.event.inputs.destroy != 'true' }}
    needs: init
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    defaults:
      run:
        working-directory: infra
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Download .terraform directory artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-init-${{ github.ref_name }}
          path: ${{ github.workspace }}/infra

      - name: Restore executable permissions for Terraform providers
        run: |
          find ${{ github.workspace }}/infra/.terraform/providers -type f -name "terraform-provider-*" -exec chmod +x {} \;


      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -var-file="config/${{ github.ref_name }}/${{ github.ref_name }}.tfvars" -out="${{ github.workspace }}/infra/tfplan"

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: ${{ github.workspace }}/infra/tfplan

  apply:
    needs: plan
    runs-on: ubuntu-latest
    environment: "${{ github.ref_name }}-manual"
    if: ${{ github.event.inputs.destroy != 'true' }}
    defaults:
      run:
        working-directory: infra
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Download .terraform directory artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-init-${{ github.ref_name }}
          path: ${{ github.workspace }}/infra

      - name: Restore executable permissions for Terraform providers
        run: |
          find ${{ github.workspace }}/infra/.terraform/providers -type f -name "terraform-provider-*" -exec chmod +x {} \;

      - name: Download plan artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: ${{ github.workspace }}/infra

      - name: Terraform Apply
        run: terraform apply tfplan

  destroy:
    if: ${{ github.event.inputs.destroy == 'true' }}
    needs: init
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    defaults:
      run:
        working-directory: infra
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Download .terraform directory artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-init-${{ github.ref_name }}
          path: ${{ github.workspace }}/infra

      - name: Restore executable permissions for Terraform providers
        run: |
          find ${{ github.workspace }}/infra/.terraform/providers -type f -name "terraform-provider-*" -exec chmod +x {} \;

      - name: Terraform Destroy
        run: terraform destroy -var-file="config/${{ github.ref_name }}/${{ github.ref_name }}.tfvars" -auto-approve
